{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAAe,MAA0B,yC,iCCSlCA,EAA0BC,IAA1BD,cAIDE,GAJ2BD,IAAXE,QAIVC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAGzCI,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAIjBC,EAAiB,cACjBC,EAAY,8BAA0BD,GAgO7BE,EAtNH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAOFH,EAAOI,UAPL,OAOnBC,EAPmB,OAUzBH,QAAQC,IACN,6BACAE,EAASC,UAAUC,YAMrBf,EAAiBa,EAASC,UAAUC,YAlBX,gCAqB3BC,MAAM,8DArBqB,0DAwB7BN,QAAQO,MAAR,MAxB6B,0DAAH,qDA4BxBC,EAAa,uCAAG,sBAAAZ,EAAA,0FAAH,qDAEba,EAAO,uCAAG,8BAAAb,EAAA,yDACY,IAAtBL,EAAWmB,OADD,uBAEZV,QAAQC,IAAI,qBAFA,iCAKdT,EAAc,IACdQ,QAAQC,IAAI,YAAaV,GANX,SAQNoB,EAAWC,IACXC,EAAU,IAAIC,IAAQnC,EAAKF,EAAWkC,GAThC,UAWNE,EAAQE,IAAIC,OAAOzB,EAAY,CACnC0B,SAAU,CACR1C,YAAaA,EAAY6B,UACzBc,KAAMP,EAASQ,OAAOf,aAdd,eAiBZJ,QAAQC,IAAI,mCAAoCV,GAjBpC,UAkBN6B,IAlBM,0DAqBZpB,QAAQC,IAAI,qBAAZ,MArBY,0DAAH,qDAyBPoB,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACR/B,EAAc+B,IAGVX,EAAc,WAClB,IAAMa,EAAa,IAAIC,aAAW5C,EAASE,GAI3C,OAHiB,IAAI2C,IACnBF,EAAY5B,OAAOC,OAAQd,IAKzB4C,EAAgB,uCAAG,8BAAAhC,EAAA,sEAEfe,EAAWC,IACXC,EAAU,IAAIC,IAAQnC,EAAKF,EAAWkC,GAC5CX,QAAQC,IAAI,QAJS,SAKfY,EAAQE,IAAIc,cAAc,CAC9BZ,SAAU,CACR1C,YAAaA,EAAY6B,UACzBc,KAAMP,EAASQ,OAAOf,UACtB0B,cAAelE,EAAcmE,WAE/BC,QAAS,CAACzD,KAXS,cAarByB,QAAQC,IAAI,yCAA0C1B,EAAY6B,UAAUC,YAbvD,SAcfe,IAde,yDAiBrBpB,QAAQC,IAAI,uCAAZ,MAjBqB,0DAAH,qDA4EtBgC,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAtC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOsC,iBAAiB,OAAQD,GACzB,kBAAMrC,OAAOuC,oBAAoB,OAAQF,MAC/C,IAGH,IAAMd,EAAU,uCAAG,gCAAAxB,EAAA,sEAETe,EAAWC,IACXC,EAAU,IAAIC,IAAQnC,EAAKF,EAAWkC,GAH7B,SAIOE,EAAQwB,QAAQ9D,YAAY+D,MAAM/D,EAAY6B,WAJrD,OAITiC,EAJS,OAMfrC,QAAQC,IAAI,kBAAmBoC,GAC/B3C,EAAW2C,EAAQ5C,SAPJ,kDAUfO,QAAQC,IAAI,wBAAZ,MACAP,EAAW,MAXI,0DAAH,qDA0BhB,OAXAuC,qBAAU,WACJ5C,GACFW,QAAQC,IAAI,0BAOb,CAACZ,IAGF,qBAAKkD,UAAU,MAAf,SAEE,sBAAKA,UAAWlD,EAAgB,mBAAqB,YAArD,UACE,sBAAKkD,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,2CACA,mBAAGA,UAAU,WAAb,+DAIElD,GAnGR,wBACEkD,UAAU,mCACVC,QAAShC,EAFX,+BAqGOnB,IA3FPW,QAAQC,IAAIR,GACI,OAAZA,GAAsC,GAAlBA,EAAQiB,OAE5B,qBAAK6B,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,kEASF,sBAAKW,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACnB,GACTA,EAAMoB,iBACNjC,KAHJ,UAME,uBACEkC,KAAK,OACLC,YAAY,kBACZrB,MAAOhC,EACPsD,SAAUxB,IAEZ,wBAAQsB,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SAEG9C,EAAQqD,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAKT,UAAU,WAAf,SACE,qBAAKU,IAAKF,EAAKG,WADcF,eA4DrC,sBAAKT,UAAU,mBAAf,UACE,qBAAKY,IAAI,eAAeZ,UAAU,eAAeU,IAAKG,IACtD,mBACEb,UAAU,cACVc,KAAMnE,EACNsC,OAAO,SACP8B,IAAI,aAJN,6BAKerE,cClPzBsE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a7a39a59.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport {Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {Program, Provider, web3} from '@project-serum/anchor';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport kp from './keypair.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst {SystemProgram, Keypair} = web3;\n\n// Create a keypair for the account that will hold the GIF data\n// let baseAccount = Keypair.generate();  // unnecessary\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n  'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect(\n            // { onlyIfTrusted: true }\n          );\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {};\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given\");\n      return;\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n      await getGifList();\n    }\n    catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address: \", baseAccount.publicKey.toString());\n      await getGifList();\n    }\n    catch (error) {\n      console.log(\"Error creating BaseAccount account: \", error);\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n// If we hit this, it means the program account hasn't been initialized.\n    console.log(gifList);\n    if (gifList === null || gifList.length == 0) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    }\n    catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n\n      // Call Solana program here.\n\n      // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Runi Solana Demo</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}